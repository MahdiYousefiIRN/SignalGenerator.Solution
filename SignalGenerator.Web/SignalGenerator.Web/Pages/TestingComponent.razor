@page "/testing"
@using System.ComponentModel.DataAnnotations
@using SignalGenerator.Web.Data.Interface
@inject ISignalTestingService TestingService
@inject IErrorHandlingService ErrorHandlingService
@inject ILogger<TestingComponent> Logger

<h3>Testing Management</h3>

<button @onclick="TestSignalTransmission">Test Signal Transmission</button>
<button @onclick="GetTestStatus">Get Test Status</button>
<button @onclick="GetErrors">Get Errors</button>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private string message;

    private async Task TestSignalTransmission()
    {
        try
        {
            // ایجاد نمونه از SignalData و تعیین مقدار ProtocolType
            var signalData = new SignalData
                {
                // مقادیر مناسب برای تست
                    Name = "Test Signal",
                    Frequency = 50,   // مطابق با قوانین Range
                    Power = 75,       // مطابق با قوانین Range
                    Timestamp = DateTime.UtcNow,
                    ProtocolType = "TCP",  // باید مقداردهی شود (required)
                    CoilStatus = true,
                    DiscreteInputStatus = true,
                    SignalCount = 10,    // مطابق با قوانین Range
                    MaxFrequency = 70,   // مطابق با قوانین Range
                    MinFrequency = 40,   // مطابق با قوانین Range
                    IntervalMs = 100,    // مقدار معقول
                    CreatedAt = DateTime.UtcNow
                };

            // انجام اعتبارسنجی
            var validationResults = new List<ValidationResult>();
            var validationContext = new ValidationContext(signalData);
            if (!Validator.TryValidateObject(signalData, validationContext, validationResults, true))
            {
                // اگر مدل معتبر نیست، پیام خطاها را لاگ کنید
                foreach (var validationResult in validationResults)
                {
                    Logger.LogError("Validation failed: " + validationResult.ErrorMessage);
                }
                message = "Signal data is invalid.";
                return; // بازگشت از متد اگر داده‌ها معتبر نباشند
            }

            // ارسال سیگنال معتبر برای تست
            var result = await TestingService.TestSignalTransmissionAsync(signalData);
            message = result.Success ? "Signal transmission test successful." : "Signal transmission test failed.";
            Logger.LogInformation("Test signal transmission logic executed successfully.");
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error occurred while testing signal transmission.");
        }
    }

    private async Task GetTestStatus()
    {
        try
        {
            // دریافت وضعیت تست
            var status = await TestingService.GetTestStatusAsync();
            message = status ?? "Test status is unavailable.";
            Logger.LogInformation("Test status fetched successfully.");
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error occurred while fetching test status.");
        }
    }

    private async Task GetErrors()
    {
        try
        {
            // دریافت خطاها
            var errors = await ErrorHandlingService.GetErrorsAsync();
            message = errors.Any() ? string.Join(", ", errors) : "No errors found.";
            Logger.LogInformation("Errors fetched successfully.");
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            Logger.LogError(ex, "Error occurred while fetching errors.");
        }
    }
}
