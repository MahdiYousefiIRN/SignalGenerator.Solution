@page "/signals"
@using SignalGenerator.Data.Interfaces
@using SignalGenerator.Data.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using SignalGenerator.Web.Services

@inject IProtocolDataStore DataStore
@inject ILogger<SignalComponent> Logger
@inject SignalProcessorService SignalProcessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProtocolCommunication ProtocolCommunication

<h3>Signal Management</h3>

<button @onclick="GenerateSignals">Generate Signals</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@if (signals != null && signals.Any())
{
    <ul>
        @foreach (var signal in signals)
        {
            <li>@signal.Id - @signal.Name</li>
        }
    </ul>
}
else
{
    <p>No signals found.</p>
}

@code {
    private List<SignalData> signals = new(); // مقداردهی اولیه
    private string errorMessage = string.Empty;

    private async Task GenerateSignals()
    {
        try
        {
            var userId = await GetCurrentUserId();
            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "User ID is not available.";
                // return;
            }

            if (ProtocolCommunication == null)
            {
                errorMessage = "ProtocolCommunication is not available.";
                return;
            }

            var config = new SignalData
                {
                    Id = userId,
                    CreatedAt = DateTime.UtcNow,
                    SignalCount = 10,
                    MinFrequency = 45,
                    MaxFrequency = 65,
                    IntervalMs = 5 * 1000,
                    ProtocolType = "ProtocolConfigs"
                };

            signals = await SignalProcessor.GetSignalsAsync(config, ProtocolCommunication);
            await DataStore.SaveSignalsAsync(signals);

            // ارسال سیگنال‌ها به API
            using var httpClient = new HttpClient();
            var response = await httpClient.PostAsJsonAsync("http://localhost:5000/api/signals/post", signals);

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"Failed to send signals. Status Code: {response.StatusCode}";
            }
            else
            {
                errorMessage = "Signals sent successfully!";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating signals");
            errorMessage = "An error occurred while generating signals.";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId = await GetCurrentUserId();
            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "User ID is not available.";
                signals = new();
                return;
            }

            signals = await DataStore.GetSignalsAsync(userId, DateTime.MinValue, DateTime.MaxValue);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error retrieving signals");
            errorMessage = "An error occurred while retrieving signals.";
            signals = new();
        }
    }

    private async Task<string?> GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authState?.User?.Identity?.IsAuthenticated == true ? authState.User.Identity.Name : null;
    }
}
