@page "/signals"
@using SignalGenerator.Data.Interfaces
@using SignalGenerator.Data.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using SignalGenerator.Web.Services

@inject IProtocolDataStore DataStore
@inject ILogger<SignalComponent> Logger
@inject SignalProcessorService SignalProcessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProtocolCommunication ProtocolCommunication

<h3>Signal Management</h3>

<button @onclick="GenerateSignals">Generate Signals</button>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

@if (signals?.Any() == true)
{
    <ul>
        @foreach (var signal in signals)
        {
            <li>@signal.Id - @signal.Name</li>
        }
    </ul>
}
else
{
    <p>No signals found.</p>
}

@code {
    private List<SignalData> signals = new();
    private string errorMessage = string.Empty;

    private async Task GenerateSignals()
    {
        errorMessage = string.Empty;

        try
        {
            var userId = await GetCurrentUserId();
            if (string.IsNullOrWhiteSpace(userId))
            {
                errorMessage = "❗ User ID not found.";
                Logger.LogWarning(errorMessage);
                return;
            }

            if (ProtocolCommunication is null)
            {
                errorMessage = "❗ Protocol communication service is not initialized.";
                Logger.LogError(errorMessage);
                return;
            }

            var config = new SignalData
                {
                    Id = userId,
                    CreatedAt = DateTime.UtcNow,
                    SignalCount = 10,
                    MinFrequency = 45,
                    MaxFrequency = 65,
                    IntervalMs = 5000,
                    ProtocolType = "ProtocolConfigs"
                };

            signals = await SignalProcessor.GetSignalsAsync(config, ProtocolCommunication);
            await DataStore.SaveSignalsAsync(signals);

            using var httpClient = new HttpClient();
            var response = await httpClient.PostAsJsonAsync("http://localhost:5000/api/signals/post", signals);

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = $"❌ Failed to send signals. HTTP {(int)response.StatusCode} {response.ReasonPhrase}";
                Logger.LogWarning(errorMessage);
            }
            else
            {
                errorMessage = "✅ Signals sent successfully.";
                Logger.LogInformation("Signals posted successfully to API.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "❌ An unexpected error occurred while generating signals.";
            Logger.LogError(ex, errorMessage);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId = await GetCurrentUserId();
            if (string.IsNullOrWhiteSpace(userId))
            {
                errorMessage = "⚠️ User ID not available during initialization.";
                signals = new();
                return;
            }

            signals = await DataStore.GetSignalsAsync(userId, DateTime.MinValue, DateTime.MaxValue);
        }
        catch (Exception ex)
        {
            errorMessage = "❌ Error while loading existing signals.";
            Logger.LogError(ex, errorMessage);
            signals = new();
        }
    }

    private async Task<string?> GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        return user?.Identity?.IsAuthenticated == true ? user.Identity.Name : null;
    }
}
